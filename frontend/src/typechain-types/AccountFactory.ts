/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AccountInfoStruct = {
  user_id: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  genderID: PromiseOrValue<BigNumberish>;
  interestID: PromiseOrValue<BigNumberish>;
  age: PromiseOrValue<BigNumberish>;
  bio: PromiseOrValue<string>;
  locationID: PromiseOrValue<BigNumberish>;
};

export type AccountInfoStructOutput = [
  string,
  string,
  number,
  number,
  BigNumber,
  string,
  BigNumber
] & {
  user_id: string;
  name: string;
  genderID: number;
  interestID: number;
  age: BigNumber;
  bio: string;
  locationID: BigNumber;
};

export declare namespace AccountFactory {
  export type AccountWithLocationStruct = {
    user_id: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    locationID: PromiseOrValue<BigNumberish>;
    genderID: PromiseOrValue<BigNumberish>;
    interestID: PromiseOrValue<BigNumberish>;
    exploredTill: PromiseOrValue<BigNumberish>;
  };

  export type AccountWithLocationStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user_id: string;
    account: string;
    locationID: BigNumber;
    genderID: BigNumber;
    interestID: BigNumber;
    exploredTill: BigNumber;
  };
}

export interface AccountFactoryInterface extends utils.Interface {
  functions: {
    "createAccount(string,uint8,uint256,uint8,string,uint256)": FunctionFragment;
    "getAccountByAddress(address)": FunctionFragment;
    "getPotentailMatches()": FunctionFragment;
    "getSelfAccount()": FunctionFragment;
    "numberOfAccounts()": FunctionFragment;
    "updateExploredTill()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createAccount"
      | "getAccountByAddress"
      | "getPotentailMatches"
      | "getSelfAccount"
      | "numberOfAccounts"
      | "updateExploredTill"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentailMatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSelfAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExploredTill",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPotentailMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExploredTill",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AccountFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createAccount(
      u_name: PromiseOrValue<string>,
      u_genderID: PromiseOrValue<BigNumberish>,
      u_age: PromiseOrValue<BigNumberish>,
      u_interestID: PromiseOrValue<BigNumberish>,
      u_bio: PromiseOrValue<string>,
      u_locationID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AccountInfoStructOutput]>;

    getPotentailMatches(overrides?: CallOverrides): Promise<[string[]]>;

    getSelfAccount(
      overrides?: CallOverrides
    ): Promise<[AccountFactory.AccountWithLocationStructOutput]>;

    numberOfAccounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateExploredTill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createAccount(
    u_name: PromiseOrValue<string>,
    u_genderID: PromiseOrValue<BigNumberish>,
    u_age: PromiseOrValue<BigNumberish>,
    u_interestID: PromiseOrValue<BigNumberish>,
    u_bio: PromiseOrValue<string>,
    u_locationID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountByAddress(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AccountInfoStructOutput>;

  getPotentailMatches(overrides?: CallOverrides): Promise<string[]>;

  getSelfAccount(
    overrides?: CallOverrides
  ): Promise<AccountFactory.AccountWithLocationStructOutput>;

  numberOfAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  updateExploredTill(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createAccount(
      u_name: PromiseOrValue<string>,
      u_genderID: PromiseOrValue<BigNumberish>,
      u_age: PromiseOrValue<BigNumberish>,
      u_interestID: PromiseOrValue<BigNumberish>,
      u_bio: PromiseOrValue<string>,
      u_locationID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AccountInfoStructOutput>;

    getPotentailMatches(overrides?: CallOverrides): Promise<string[]>;

    getSelfAccount(
      overrides?: CallOverrides
    ): Promise<AccountFactory.AccountWithLocationStructOutput>;

    numberOfAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    updateExploredTill(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createAccount(
      u_name: PromiseOrValue<string>,
      u_genderID: PromiseOrValue<BigNumberish>,
      u_age: PromiseOrValue<BigNumberish>,
      u_interestID: PromiseOrValue<BigNumberish>,
      u_bio: PromiseOrValue<string>,
      u_locationID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPotentailMatches(overrides?: CallOverrides): Promise<BigNumber>;

    getSelfAccount(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    updateExploredTill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAccount(
      u_name: PromiseOrValue<string>,
      u_genderID: PromiseOrValue<BigNumberish>,
      u_age: PromiseOrValue<BigNumberish>,
      u_interestID: PromiseOrValue<BigNumberish>,
      u_bio: PromiseOrValue<string>,
      u_locationID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPotentailMatches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelfAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateExploredTill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
